# -*- coding: utf-8 -*-
"""drowsieness detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fT9WjxWf2HpwAFridWGoSBFbi0R-F_4J
"""

pip install opencv-python opencv-python-headless dlib torch torchvision numpy imutils

from google.colab import files
uploaded = files.upload()

from google.colab import files
uploaded = files.upload()

import cv2
import dlib
import numpy as np
from imutils import face_utils
from google.colab.patches import cv2_imshow

# Load the face detector and face landmarks predictor from dlib
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor('shape_predictor_68_face_landmarks.dat')  # Download from dlib's website

# Function to calculate the Eye Aspect Ratio (EAR) to detect blink/drowsiness
def eye_aspect_ratio(eye):
    # Euclidean distance between the vertical eye landmarks
    A = np.linalg.norm(eye[1] - eye[5])
    B = np.linalg.norm(eye[2] - eye[4])
    # Euclidean distance between the horizontal eye landmarks
    C = np.linalg.norm(eye[0] - eye[3])

    # EAR formula
    ear = (A + B) / (2.0 * C)
    return ear

# Load the uploaded video
video_path = list(uploaded.keys())[0]  # Get the name of the uploaded video file
cap = cv2.VideoCapture(video_path)

# Thresholds and constants for drowsiness detection
EAR_THRESHOLD = 0.25
CONSECUTIVE_FRAMES = 48  # Consecutive frames where eye is below threshold
frame_count = 0
drowsy = False

while True:
    ret, frame = cap.read()
    if not ret:
        break

    # Convert frame to grayscale for face detection
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces
    faces = detector(gray)

    for face in faces:
        # Get the landmarks of the face
        landmarks = predictor(gray, face)
        landmarks = face_utils.shape_to_np(landmarks)

        # Get the coordinates of the left and right eyes
        left_eye = landmarks[42:48]
        right_eye = landmarks[36:42]

        # Calculate the Eye Aspect Ratio (EAR) for both eyes
        left_ear = eye_aspect_ratio(left_eye)
        right_ear = eye_aspect_ratio(right_eye)

        # Average EAR for both eyes
        ear = (left_ear + right_ear) / 2.0

        # Check if EAR is below the threshold (indicating drowsiness)
        if ear < EAR_THRESHOLD:
            frame_count += 1
            if frame_count >= CONSECUTIVE_FRAMES:
                drowsy = True
        else:
            frame_count = 0
            drowsy = False

        # Show the EAR on the frame
        cv2.putText(frame, f'EAR: {ear:.2f}', (30, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

    # If the person is detected to be drowsy, display a warning
    if drowsy:
        cv2.putText(frame, "DROWSINESS ALERT!", (150, 150), cv2.FONT_HERSHEY_SIMPLEX, 1.5, (0, 0, 255), 3)
        print("Drowsiness detected!")

    # Display the frame in Colab
    cv2_imshow(frame)

# Release the video capture object
cap.release()